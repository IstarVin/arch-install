#!/bin/bash

baseurl="https://arch-install.pages.dev"

execute_command() {
	while true; do
		"$@"
		exit_code=$?
		if [ $exit_code -eq 0 ]; then
			break
		else
			echo "Command failed with exit code $exit_code."
			choice=$(gum choose "Continue the script" "Retry the command" "Exit the script")
			case $choice in
			"Continue the script") break ;;
			"Retry the command") continue ;;
			"Exit the script") exit 1 ;;
			esac
		fi
	done
}

read_password() {
	key=$1
	while :; do
		read -s -r -p "Enter $key: " $key
		echo
		read -s -r -p "Enter $key again: " check_value
		echo
		[[ ${!key} != "$check_value" ]] || break
		echo "error try again"
	done
	echo "$key=${!key}" >> /tmp/saved 
}

read_info() {
	key=$1
	read -r -p "Enter $key: " $key
	echo "$key=${!key}" >> /tmp/saved 
}

# Ensure /mnt is unmounted
if lsblk | grep "/mnt$" >/dev/null 2>&1; then
	umount -q -A --recursive /mnt
fi

# Print available disks
lsblk -n --output TYPE,KNAME,SIZE,MODEL | awk '$1=="disk"{print $2"|"$3" - "$4}'

# source saved password
[[ -f /tmp/saved ]] && source /tmp/saved

# Enter necessary infos
[[ ! -z $disk ]] || read_info "disk"
[[ ! -z $username ]] || read_info "username"
[[ ! -z $fullname ]] || read_info "fullname"
[[ ! -z $hostname ]] || read_info "hostname"

[[ ! -z $user_password ]] || read_password "user_password"
[[ ! -z $root_password ]] || read_password "root_password"
[[ ! -z $luks_password ]] || read_password "luks_password"

clear

## Setup pacman config
sed -i 's/^#ParallelDownloads/ParallelDownloads/' /etc/pacman.conf
sed -i 's/^#Color/Color/' /etc/pacman.conf

## Configure Mirrors
echo "Updating mirrors using reflector"
reflector -a 48 -c JP -f 5 -l 20 --sort rate --save /etc/pacman.d/mirrorlist

## Setup pacman
pacman-key --init
pacman-key --populate

pacman -Sy archlinux-keyring debugedit gum --noconfirm --needed

## Add CachyOS Repo
pacman-key --recv-keys F3B607488DB35A47 --keyserver keyserver.ubuntu.com
pacman-key --lsign-key F3B607488DB35A47
pacman -U --noconfirm 'https://mirror.cachyos.org/repo/x86_64/cachyos/cachyos-keyring-20240331-1-any.pkg.tar.zst' \
'https://mirror.cachyos.org/repo/x86_64/cachyos/cachyos-mirrorlist-22-1-any.pkg.tar.zst' \
'https://mirror.cachyos.org/repo/x86_64/cachyos/cachyos-v3-mirrorlist-22-1-any.pkg.tar.zst' \
'https://mirror.cachyos.org/repo/x86_64/cachyos/cachyos-v4-mirrorlist-22-1-any.pkg.tar.zst' \
'https://mirror.cachyos.org/repo/x86_64/cachyos/pacman-7.0.0.r7.g1f38429-1-x86_64.pkg.tar.zst'

sed -i '/# after the header, and they will be used before the default mirrors./a\
\
#CachyOS Repos\
[cachyos-v3]\
Include = /etc/pacman.d/cachyos-v3-mirrorlist\
[cachyos-core-v3]\
Include = /etc/pacman.d/cachyos-v3-mirrorlist\
[cachyos-extra-v3]\
Include = /etc/pacman.d/cachyos-v3-mirrorlist\
[cachyos]\
Include = /etc/pacman.d/cachyos-mirrorlist' /etc/pacman.conf

sed -i 's/#\[multilib\]/\[multilib\]/' /etc/pacman.conf
sed -i '/\[multilib\]/ { n; s/#// }' /etc/pacman.conf

pacman -Sy

## Setup disk
setup_disk() {
	device=/dev/${disk}
	wipefs --all "${device}"
	sgdisk --clear "${device}" --new 1::-512MiB "${device}" --new 2::0 --typecode 2:ef00 "${device}"
	sgdisk --change-name=1:primary --change-name=2:ESP "${device}"

	if [[ $disk == *"nvme"* ]]; then
		part_root=${device}p1
		part_boot=${device}p2
	else
		part_root=${device}1
		part_boot=${device}2
	fi

	mkfs.vfat -n "EFI" -F 32 "${part_boot}"
}
execute_command setup_disk

## Setuo LUKS
setup_luks() {
	echo -n "${luks_password}" | cryptsetup luksFormat "${part_root}"
	echo -n "${luks_password}" | cryptsetup luksOpen "${part_root}" root
	part_root_install=/dev/mapper/root
}
execute_command setup_luks

## Setup partitions
setup_partitions() {
	mkfs.btrfs -fL btrfs ${part_root_install}
	mount ${part_root_install} /mnt

	btrfs subvolume create /mnt/@
	btrfs subvolume create /mnt/@var
	btrfs subvolume create /mnt/@home
	btrfs subvolume create /mnt/@snapshots

	umount /mnt
	mount -m -o noatime,nodiratime,compress=zstd,subvol=@ ${part_root_install} /mnt
	mount -m -o noatime,nodiratime,compress=zstd,subvol=@var ${part_root_install} /mnt/var
	mount -m -o noatime,nodiratime,compress=zstd,subvol=@home ${part_root_install} /mnt/home
	mount -m -o noatime,nodiratime,compress=zstd,subvol=@snapshots ${part_root_install} /mnt/.snapshots

	mount -m "$part_boot" /mnt/boot
}
execute_command setup_partitions

pacstrap /mnt btrfs-progs

# Determine intel or amd
ucode=""
if lscpu | grep "Model name:" | grep AMD >/dev/null 2>&1; then
	ucode="amd-ucode"
elif lscpu | grep "Model name:" | grep Intel >/dev/null 2>&1; then
	ucode="intel-ucode"
else
	echo "Unkown CPU"
	exit 1
fi

## Install Arch
pacstrap /mnt iptables-nft mkinitcpio
pacstrap /mnt base linux-cachyos linux-cachyos-headers linux-firmware $ucode base-devel
pacstrap /mnt cachyos-v3-mirrorlist cachyos-mirrorlist
pacstrap /mnt git vim sudo efibootmgr networkmanager pacman-contrib \
	wireplumber pipewire-audio pipewire-pulse pipewire-jack pipewire-alsa gst-plugin-pipewire \
	linux-cachyos-nvidia scx-scheds yay kitty cachyos-rate-mirrors

# remove fallback from mkinitcpio
sed -i "s/'default' 'fallback'/'default'/" /mnt/etc/mkinitcpio.d/linux-*.preset

## Setup fstab
genfstab -U /mnt >>/mnt/etc/fstab

## Copy post install to new root
cp /etc/pacman.conf /mnt/etc/pacman.conf -f

## Setup users and password
useradd -m -R /mnt "$username"
usermod -R /mnt -c "$fullname" "$username"
usermod -R /mnt -aG wheel "$username"
echo -n "${username}:${user_password}" | chpasswd -R /mnt
echo -n "root:${root_password}" | chpasswd -R /mnt

# Temporarily setup user as sudo nopasswd
echo "${username} ALL=(ALL) NOPASSWD: ALL" >/mnt/etc/sudoers.d/00_"${username}"

# Setup Systemd-boot
arch-chroot /mnt bootctl install

cat <<EOF >/mnt/boot/loader/loader.conf
default  arch.conf
timeout  0
console-mode max
editor   no
EOF

device_uuid=$(blkid | grep "${part_root}" | grep -oP ' UUID="\K[\w\d-]+')

cat <<EOF >/mnt/boot/loader/entries/arch.conf
title   Arch Linux
linux   /vmlinuz-linux-cachyos
initrd  /initramfs-linux-cachyos.img
options cryptdevice=UUID=$device_uuid:root root=/dev/mapper/root rootfstype=btrfs rootflags=subvol=@ quiet splash rw
EOF

# Setup mkinitcpio
sed -i '/^HOOKS/s/block/& encrypt/' /mnt/etc/mkinitcpio.conf
arch-chroot /mnt mkinitcpio -P

# Proceed to setup
arch-chroot /mnt bash <(curl -s ${baseurl}/setup)

# Remove nopasswd
sed -i 's/NOPASSWD: //' /mnt/etc/sudoers.d/00_"$username"

# Set hostname
echo "$hostname" >/mnt/etc/hostname

# Setup keyfile
read -r -p "Enter keyfile command: " keyfile_command
eval "$keyfile_command" > /mnt/root/keyfile

chmod 400 /mnt/root/keyfile

curl -s "${baseurl}/extras/snapshot" > /mnt/usr/bin/snapshot
chmod +x /mnt/usr/bin/snapshot

arch-chroot /mnt snapshot create init
arch-chroot /mnt cachyos-rate-mirrors

tee /mnt/home/${username}/.postinstall > /dev/null << EOF
bash <(curl -s ${baseurl}/postinstall)
EOF

echo "After reboot run \` .postinstall \`"